
@import 'sketch2unity.framework/sketch2unity.js'

const contentType = "sketch2unity";
const version = "1.0.0";
var artboardName;
var imageName = [];
var repeatImages = [];
var wrongGroups = [];

var onRun = function(context) {
    const doc = context.document;
    const select = context.selection;
    
    var mocha = Mocha.sharedRuntime();
    var customPanel = mocha.valueForKey("Sketch2unity");
  
    if (doc.isDraft()) {
        [NSApp displayDialog:@"Please save the document to export." withTitle:@"Document Not Saved"];
        return;
    }
    if (doc.isDocumentEdited()) {
        var alert = [NSAlert alertWithMessageText:@"Document Not Saved" defaultButton:@"Save and Continue" alternateButton:@"Cancel" otherButton:@"Continue" informativeTextWithFormat:@"To capture the latest changes in this Sketch document, sketch2unity needs to save it first."];
        
        var response = [alert runModal];
        if (response == NSAlertDefaultReturn) {
            [doc showMessage:@"Saving documentâ€¦"];
            [doc saveDocument:nil];
            while (doc.isDocumentEdited()) {
                [[NSRunLoop currentRunLoop] runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantFuture]];
            }
        }
        else if (response == NSAlertAlternateReturn) {
            return;
        }
        response = null;
        alert = null;
    }
    if (select.length == 0) {
        [NSApp displayDialog:@"Please select the Artboard Group to export." withTitle:@"Nothing Selected"];
        return;
    }
    
    if (select.length > 1) {
        [NSApp displayDialog:@"Please select only one Artboard Group to export." withTitle:@"Multiple Groups Selected"];
        return;
    }
    if (select[0].className() != "MSArtboardGroup" && select[0].className() != "MSLayerGroup") {
        [NSApp displayDialog:@"Please select the Artboard Group to export." withTitle:@"Single Layer Selected"];
        return;
    }
    var panel = NSOpenPanel.openPanel();
    panel.setCanChooseFiles(false);
    panel.setCanChooseDirectories(true);
    panel.setAllowsMultipleSelection(false);
    panel.setCanCreateDirectories(true);
    panel.setMessage("Choose a directory to place your output files");
    
    var clicked = panel.runModal();
    if (clicked == NSFileHandlingPanelOKButton) {
        var exportPath = panel.URL().path() + "/sketch2unity/";
        var fileManager = NSFileManager.defaultManager();
        var response = 1000;  // OK:1000, Cancel:1001
        
        /*if (fileManager.fileExistsAtPath(exportPath)) {
         var alert = NSAlert.new();
         alert.setMessageText("Directory already exists");
         alert.setInformativeText("Do you want to overwrite?");
         alert.addButtonWithTitle("OK");
         alert.addButtonWithTitle("Cancel");
         var response = alert.runModal();
         }*/
        if (response == 1000) {
            var group = select[0];
            var groupName = String(group.name());
            artboardName = groupName;
            log("-- export: " + groupName + "\nwith path: " + exportPath);
            
            var jsonObj = exportJSON(group, exportPath, customPanel);
            var file = NSString.stringWithString(JSON.stringify(jsonObj, null, "\t"));
            [file writeToFile:exportPath + groupName + ".json" atomically:true encoding:NSUTF8StringEncoding error:null];
            
            var alertMessage = groupName + ".json and images are saved to: " + exportPath + "\n";
            if (repeatImages.length > 0) {
                alertMessage = alertMessage + "\nwith the following images repeat: \n";
                for (var i = 0; i < repeatImages.length; i++) {
                    alertMessage = alertMessage + (i+1) + ". " + repeatImages[i] + "\n";
                }
            }
            if (wrongGroups.length > 0) {
                alertMessage = alertMessage + "\nbut there are more than one components in the groups: \n";
                for (var i = 0; i < wrongGroups.length; i++) {
                    alertMessage = alertMessage + (i+1) + ". " + wrongGroups[i] + "\n";
                }
                alertMessage = alertMessage + "Please check them out and export again!\n";
            }
            [NSApp displayDialog:alertMessage withTitle:@"Document Exported"];
            
            imageName.length = 0;
            repeatImages.length = 0;
            wrongGroups.length = 0;
        }
        else {
            return;
        }
    }
    else {
        return;
    }
}

var onSelectionChanged = function(context) {
    sketch2unity.onSelectionChanged(context);
};



function exportJSON (group, path, customPanel) {
    
    var groupName = String(group.name());
    var groupID = String(group.objectID());
    //log("-> export json of group: " + groupName + " with id: " + groupID);
    
    var groupClass = String(group.className());
    var groupRotation = group.rotation();
    if (groupRotation != 0) group.setRotation(0);
    
    if (groupClass == "MSSymbolInstance") {
        var mgroup = group.symbolMaster();
        var subGroup = mgroup.layers();
    } else {
        var subGroup = group.layers();
    }
    var layerFrame = group.absoluteRect();
    var parentFrame = group.parentGroup().absoluteRect();
    var layerXpos = layerFrame.x() + layerFrame.width()/2 - (parentFrame.x() + parentFrame.width()/2);
    var layerYpos = layerFrame.y() + layerFrame.height()/2 - (parentFrame.y() + parentFrame.height()/2);
    
    var layerHeight = layerFrame.height();
    var layerWidth = layerFrame.width();
    var maxAnchorX = customPanel.getMaxAnchorX(groupID);
    var maxAnchorY = customPanel.getMaxAnchorY(groupID);
    var minAnchorX = customPanel.getMinAnchorX(groupID);
    var minAnchorY = customPanel.getMinAnchorY(groupID);
    var pivotX = customPanel.getPivotX(groupID);
    var pivotY = customPanel.getPivotY(groupID);
    
    // get components & children infor
    var compGroup = [], childGroup = [];
    for (var i = 0; i < subGroup.length; i++) {
        var layer = subGroup[i];
        if (!layer.isVisible()) continue;

        var layerClass = String(layer.className());
        
        if (layerClass == "MSTextLayer" || layerClass == "MSBitmapLayer" || layerClass == "MSShapeGroup") {
            compGroup.push(layer);
        }
        else if (layerClass == "MSLayerGroup" || layerClass == "MSSymbolInstance") {
            childGroup.push(layer);
        }
    }
    
    if (compGroup.length > 1) {
        wrongGroups.push(groupName);
        var groupComponents = [];
    } else {
        var groupComponents = exportComponents(compGroup, path, customPanel);
    }
    var groupChildren = exportChildren(childGroup, path, customPanel);
    
    var jsonObj = {
        content_type: contentType,
        version: version,
        name: groupName,
        layout: {
            "max_anchor": {"x": maxAnchorX, "y": maxAnchorY},
            "min_anchor": {"x": minAnchorX, "y": minAnchorY},
            "pivot": {"x": pivotX, "y": pivotY},
            "values": [layerXpos, layerYpos, layerWidth, layerHeight],
            "rotation_z": groupRotation
        },
        components: groupComponents,
        children: groupChildren
    };
    
    if (groupRotation != 0) group.setRotation(groupRotation);
    return jsonObj;
}

function exportChildren (subGroup, path, customPanel) {
    var childArray = [];
    
    for (var i = 0; i < subGroup.length; i++) {
        var layer = subGroup[i];
        var layerName = String(layer.name());
        
        var groupInfor = exportJSON(layer, path, customPanel);
        childArray.push(
            groupInfor
        );
    }
    return childArray;
}

function exportComponents (subGroup, path, customPanel) {
    var compArray = [];
    
    for (var i = 0; i < subGroup.length; i++) {
        var layer = subGroup[i];
        var layerClass = String(layer.className());
        var layerName = String(layer.name());
        var layerID = String(layer.parentGroup().objectID());
        
        if (layerClass == "MSTextLayer") {
            var layerColor = "#" + String(layer.textColor().immutableModelObject().hexValue());
            var font = String(layer.fontPostscriptName());
            var fontSize = layer.fontSize();
            var fontAutoFit = customPanel.getTextAuto(layerID);
            var layerAlign = textAlign2String(layer.textAlignment());
            
            compArray.push({
                           type: "text",
                           text: layerName,
                           font_name: font,
                           font_size: fontSize,
                           auto_fit_to: fontAutoFit,
                           color: layerColor,
                           alignment: layerAlign
                           });
        }
        else if (layerClass == "MSBitmapLayer") {
            compArray.push({
                type: "image",
                image: layerName,
                color: "#FFFFFF"
            });
            exportImage(layer, path);
        }
        else if (layerClass == "MSShapeGroup") {
            var layerColor = String(firstVisibleColor(layer));
            if (layerColor == "undefined") layerColor = "#FFFFFF";
            else layerColor = "#" + layerColor;
            
            compArray.push({
                           type: "image",
                           image: layerName,
                           color: layerColor
                           });
            exportImage(layer, path);
        }
    }
    return compArray;
}



function exportImage (layer, path) {
    var layerName = String(layer.name());
    if (isRepeat(layerName)) {
        return;
    }
    var sketch = require('sketch/dom');
    var options = {output: path + "images/"};
    sketch.export(layer, options);
    imageName.push(layerName);
}

function isRepeat (name) {
    for (var i = 0; i < imageName.length; i++) {
        if (name == imageName[i]) {
            var exist = false;
            for(var j = 0; j < repeatImages.length; j++) {
                if (name == repeatImages[j]) {
                    exist = true;
                    break;
                }
            }
            if (!exist) repeatImages.push(name);
            return true;
        }
    } return false;
}

function textAlign2String (align) {
    if (align == 0) return "left";
    else if (align == 1) return "right";
    else return "center";
}

function firstVisibleColor (layer) {
    var fillArray = layer.style().fills();
    var fill = fillArray[0];
    return fill.color().immutableModelObject().hexValue();
}

